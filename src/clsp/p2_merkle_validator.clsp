(mod (
  (@ CURRIED_DATA
    (
      VALIDATOR_MOD_HASH
      P2_MERKLE_VALIDATOR_MOD
      ACH_CLAW_HASH
      ACH_CLAIM_HASH
      P2_MERKLE_HASH
      TIMELOCK
      INNER_PUZ
    )
  )
  solution_data
  conditions
  )

  (include condition_codes.clib)
  (include curry_and_treehash.clib)
  (include utility_macros.clib)
  (include merkle_utils.clib)
  (include *standard-cl-21*)

  (defun-inline opcode (condition) (f condition))
  (defun-inline puzhash (condition) (f (r condition)))
  (defun-inline amount (condition) (f (r (r condition))))


  (defun-inline my_cb_puzhash (
    (@ CURRIED_DATA
      (
	VALIDATOR_MOD_HASH
	P2_MERKLE_VALIDATOR_MOD
	ACH_CLAW_HASH
	ACH_CLAIM_HASH
	P2_MERKLE_HASH
	TIMELOCK
	INNER_PUZ
      )
    )
    )

    (puzzle_hash_of_curried_function VALIDATOR_MOD_HASH
      (sha256tree
        (list
	  (list
	    P2_MERKLE_VALIDATOR_MOD
	    CURRIED_DATA
	  )
	  (list
	    INNER_PUZ
	    ()
	  )
	)
      )
    )
  )

  (defun-inline curry_claw (ACH_CLAW_HASH INNER_PUZ clawback_ph)
    (puzzle_hash_of_curried_function ACH_CLAW_HASH
      (sha256tree INNER_PUZ)
      (sha256 1 clawback_ph)
    )
  )

  (defun-inline curry_claim (ACH_CLAIM_HASH TIMELOCK p2_ph)
    (puzzle_hash_of_curried_function ACH_CLAIM_HASH
      (sha256 1 p2_ph)
      (sha256 1 TIMELOCK)
    )
  )

  (defun-inline curry_merkle (P2_MERKLE_HASH MERKLE_ROOT)
    (puzzle_hash_of_curried_function P2_MERKLE_HASH
      (sha256 1 MERKLE_ROOT)
    )
  )

  ;; Get the merkle root from two inputs
  (defun-inline merkleize (left right)
    (simplify_merkle_proof left (list 0 (sha256 1 right)))
  )

  (defun-inline create_p2_merkle_puzhash (
    (@ CURRIED_DATA
      (
	VALIDATOR_MOD_HASH
	P2_MERKLE_VALIDATOR_MOD
	ACH_CLAW_HASH
	ACH_CLAIM_HASH
	P2_MERKLE_HASH
	TIMELOCK
	INNER_PUZ
      )
    )
    target_ph
    )
    
    (curry_merkle P2_MERKLE_HASH
       (merkleize
	 (curry_claw ACH_CLAW_HASH
	             INNER_PUZ
		     (my_cb_puzhash CURRIED_DATA)
	 )
	 (curry_claim ACH_CLAIM_HASH TIMELOCK target_ph)
      )
    )
  )


  (defun validate_cc_condition (CURRIED_DATA target_ph condition)
    (if (= (puzhash condition) (create_p2_merkle_puzhash CURRIED_DATA target_ph))
      (amount condition)
      (if (= (puzhash condition) (my_cb_puzhash CURRIED_DATA))
        (amount condition)
        (x "CREATE_COIN puzhash is not a valid p2_merkle or cb_outer")  
      )
    )
  )


  (defun validate_cc_conditions_and_get_amount (CURRIED_DATA solution_data conditions)
    (if conditions
      (if (= (opcode (f conditions)) CREATE_COIN)
	(+
	  (validate_cc_condition CURRIED_DATA (f solution_data) (f conditions))
	  (validate_cc_conditions_and_get_amount CURRIED_DATA (r solution_data) (r conditions))
	)
	(validate_cc_conditions_and_get_amount CURRIED_DATA solution_data (r conditions))
      )
      ()
    )
  )


  (defun validate_assert_my_amount (conditions calculated_amount)
    (if conditions
      (if (= (opcode (f conditions)) ASSERT_MY_AMOUNT)
        (assert (= (f (r (f conditions))) calculated_amount)
	  1
	)
	(validate_assert_my_amount (r conditions) calculated_amount)
      )
      (x "ASSERT_MY_AMOUNT not found")
    )
  )


  (defun main (CURRIED_DATA solution_data conditions)
    (validate_assert_my_amount
      conditions
      (validate_cc_conditions_and_get_amount
        CURRIED_DATA
	solution_data
	conditions
      )
    )
  )


  (main CURRIED_DATA solution_data conditions)
  
)
